// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TranSupport.Calculator.Data;

#nullable disable

namespace TranSupport.Calculator.Data.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.Intersection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Intersections");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.IntersectionScenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IntersectionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.ToTable("IntersectionScenarios");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.Street", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetLane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StreetScenarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TurnRelationType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetScenarioId");

                    b.ToTable("StreetLanes");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetRelation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntryStreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExitStreetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExitStreetId");

                    b.HasIndex("EntryStreetId", "ExitStreetId")
                        .IsUnique();

                    b.ToTable("StreetRelations");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetScenario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntersectionScenarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StreetId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionScenarioId");

                    b.HasIndex("StreetId");

                    b.ToTable("StreetScenarios");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.TrafficVolumes.StreetVolumeDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StreetRelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TrafficVolumeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VolumeBuses")
                        .HasColumnType("int");

                    b.Property<int>("VolumeCars")
                        .HasColumnType("int");

                    b.Property<int>("VolumeMotorcycles")
                        .HasColumnType("int");

                    b.Property<int>("VolumeTractors")
                        .HasColumnType("int");

                    b.Property<int>("VolumeTrucks")
                        .HasColumnType("int");

                    b.Property<int>("VolumeTrucksWithTrailers")
                        .HasColumnType("int");

                    b.Property<int>("VolumeVans")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StreetRelationId");

                    b.HasIndex("TrafficVolumeId");

                    b.ToTable("StreetVolumeDetails");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.TrafficVolumes.TrafficVolume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IntersectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ModifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("IntersectionId");

                    b.ToTable("TrafficVolumes");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab87b1cd-8b67-44f8-bca0-4511da8d9c9c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@ts.pl",
                            PasswordHash = "$2a$11$DNEo7Gt7Asse1B0szA4Ls.SX2dR9YjKjpf/EnRQZyXg7S3ImMEZWy",
                            UserRole = 0
                        });
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.Intersection", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Project", "Project")
                        .WithMany("Intersections")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.IntersectionScenario", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Intersections.Intersection", "Intersection")
                        .WithMany("IntersectionScenarios")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Project", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.User", "Owner")
                        .WithMany("Projects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.Street", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Intersections.Intersection", "Intersection")
                        .WithMany("Streets")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetLane", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Streets.StreetScenario", "StreetScenario")
                        .WithMany("StreetLane")
                        .HasForeignKey("StreetScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetScenario");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetRelation", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Streets.Street", "EntryStreet")
                        .WithMany("EntryStreetVolumes")
                        .HasForeignKey("EntryStreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TranSupport.Calculator.Data.Entities.Streets.Street", "ExitStreet")
                        .WithMany("ExitStreetVolumes")
                        .HasForeignKey("ExitStreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EntryStreet");

                    b.Navigation("ExitStreet");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetScenario", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Intersections.IntersectionScenario", "IntersectionScenario")
                        .WithMany("StreetScenario")
                        .HasForeignKey("IntersectionScenarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TranSupport.Calculator.Data.Entities.Streets.Street", "Street")
                        .WithMany("StreetScenarios")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("IntersectionScenario");

                    b.Navigation("Street");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.TrafficVolumes.StreetVolumeDetail", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Streets.StreetRelation", "StreetRelation")
                        .WithMany("StreetVolumeDetails")
                        .HasForeignKey("StreetRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TranSupport.Calculator.Data.Entities.TrafficVolumes.TrafficVolume", "TrafficVolume")
                        .WithMany("StreetVolumeDetails")
                        .HasForeignKey("TrafficVolumeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StreetRelation");

                    b.Navigation("TrafficVolume");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.TrafficVolumes.TrafficVolume", b =>
                {
                    b.HasOne("TranSupport.Calculator.Data.Entities.Intersections.Intersection", "Intersection")
                        .WithMany("TrafficVolumes")
                        .HasForeignKey("IntersectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Intersection");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.Intersection", b =>
                {
                    b.Navigation("IntersectionScenarios");

                    b.Navigation("Streets");

                    b.Navigation("TrafficVolumes");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Intersections.IntersectionScenario", b =>
                {
                    b.Navigation("StreetScenario");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Project", b =>
                {
                    b.Navigation("Intersections");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.Street", b =>
                {
                    b.Navigation("EntryStreetVolumes");

                    b.Navigation("ExitStreetVolumes");

                    b.Navigation("StreetScenarios");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetRelation", b =>
                {
                    b.Navigation("StreetVolumeDetails");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.Streets.StreetScenario", b =>
                {
                    b.Navigation("StreetLane");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.TrafficVolumes.TrafficVolume", b =>
                {
                    b.Navigation("StreetVolumeDetails");
                });

            modelBuilder.Entity("TranSupport.Calculator.Data.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
